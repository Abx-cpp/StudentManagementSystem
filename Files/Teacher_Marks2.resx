<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        T6Pcxy/NVhEAAAAASUVORK5CYII=
</value>
  </data>
</root>